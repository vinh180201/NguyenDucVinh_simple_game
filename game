#include <SDL.h>
#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

void logSDLError(std::ostream& os,const std::string &msg, bool fatal = false);

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const string WINDOW_TITLE = "An Implementation of Code.org Painter";

void initSDL(SDL_Window* &window, SDL_Renderer* &renderer);

void quitSDL(SDL_Window* window, SDL_Renderer* renderer);

void waitUntilKeyPressed();

void refreshScreen(SDL_Window* window, SDL_Renderer* renderer, const SDL_Rect& filled_rect);


struct Box {
    float x;
    float y;
    float w;
    float h;
    void render (SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); // green
        SDL_RenderFillRect(renderer, &filled_rect);
    }
    void moveRight () {
        x+=5;
    }
    void moveLeft () {
        x-=5;
    }
    void moveUp () {
        y-=5;
    }
    void moveDown () {
        y+=5;
    }
    bool inside(float minX,float minY,float maxX,float maxY) {
        return (minX<=x && minY<=y && maxX>=x+w && maxY>=y+h);
    }
    bool destroyByHorizonal (float y1,float y2,int count) {
        float a=1.0*sqrt(790*790+(y1-y2)*(y1-y2));
        float b=1.0*(sqrt(x*x+(y-y1)*(y-y1))+1.0*sqrt((790-x)*(790-x)+(y-y2)*(y-y2)));
        cout << "a=" << a << " b=" << b << " ";
        if (count%20==15) {
            return !(b-2.5<=a && a<=b+2.5);
        }
        else {
            return true;
        }
    }
    bool destroyByVertical (float x1,float x2,int count) {
        float a=1.0*sqrt(590*590+(x1-x2)*(x1-x2));
        float b=1.0*(sqrt(y*y+(x-x1)*(x-x1))+1.0*sqrt((590-y)*(590-y)+(x-x2)*(x-x2)));
        cout << "a=" << a << " b=" << b << " ";
        if (count%20==15) {
            return !(b-2.5<=a && a<=b+2.5);
        }
        else {
            return true;
        }
    }
};

struct ObstacleHorizonal {
    float x;
    float y;
    float w;
    float h;
    ObstacleHorizonal (float _x,float _y,float _w,float _h) {
        x=_x;
        y=_y;
        w=_w;
        h=_h;
    }
    void createSetBackHorizonal(SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255);
        SDL_RenderFillRect(renderer, &filled_rect);
    }
};
// ngang
void initSetBackHorizonal (SDL_Renderer* &renderer,float y1,float y2,int count) {
    //srand(time(NULL));
    ObstacleHorizonal setBack1(0,y1,10,10);
    setBack1.createSetBackHorizonal(renderer);
    SDL_RenderPresent(renderer);

    ObstacleHorizonal setBack2(790,y2,10,10);
    setBack2.createSetBackHorizonal(renderer);
    SDL_RenderPresent(renderer);

    SDL_SetRenderDrawColor(renderer,0,0,255,255);
    if (count%20==15) {
        SDL_RenderDrawLine(renderer,0,y1,790,y2);
        SDL_RenderPresent(renderer);
    }
}

struct ObstacleVertical {
    float x;
    float y;
    float w;
    float h;
    ObstacleVertical (float _x,float _y,float _w,float _h) {
        x=_x;
        y=_y;
        w=_w;
        h=_h;
    }
    void createSetBackVertical(SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_RenderFillRect(renderer, &filled_rect);
    }
};

void initSetBackVertical (SDL_Renderer* &renderer,float x1,float x2,int count) {
    //srand(time(NULL));
    ObstacleVertical setBack1(x1,0,10,10);
    setBack1.createSetBackVertical(renderer);
    SDL_RenderPresent(renderer);


    ObstacleVertical setBack2(x2,590,10,10);
    setBack2.createSetBackVertical(renderer);
    SDL_RenderPresent(renderer);

    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    if (count%20==15) {
        SDL_RenderDrawLine(renderer,x1,0,x2,590);
        SDL_RenderPresent(renderer);
    }
}

int main(int argc, char* argv[])
{
    srand(time(NULL));
    SDL_Window* window;
    SDL_Renderer* renderer;
    initSDL(window, renderer);
    float x1=rand()%(SCREEN_WIDTH-9);
    float x2=rand()%(SCREEN_WIDTH-9);
    float y1=rand()%(SCREEN_HEIGHT-9);
    float y2=rand()%(SCREEN_HEIGHT-9);
    SDL_Event e;


    Box box;
    box.x=0;
    box.y=0;
    box.w=10;
    box.h=10;
    int count=0;
    while (box.inside(0,0,SCREEN_WIDTH,SCREEN_HEIGHT)) {
        if (box.destroyByHorizonal(y1,y2,count)==false || box.destroyByVertical(x1,x2,count)==false) {
            initSetBackHorizonal(renderer,y1,y2,15);
            initSetBackVertical(renderer,x1,x2,15);
            SDL_Delay(200);
            break;
        }

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
        SDL_RenderClear(renderer);
        box.render(renderer);
        SDL_RenderPresent(renderer);
        if (count%20==0) {
            x1= rand()%(SCREEN_WIDTH-9);
            x2= rand()%(SCREEN_WIDTH-9);
            y1= rand()%(SCREEN_HEIGHT-9);
            y2= rand()%(SCREEN_HEIGHT-9);
            cout << "x1=" << x1 << " x2=" << x2 << " y1=" << y1 << " y2=" << y2 << " ";
        }
        if ( 5<=count%20 && count%20<=15) {

            initSetBackHorizonal(renderer,y1,y2,count);
            initSetBackVertical(renderer,x1,x2,count);
        }
        cout << "count=" << count << endl ;
        count++;
        waitUntilKeyPressed();
        if ( SDL_WaitEvent(&e) == 0) continue;

        // Nếu sự kiện là kết thúc (như đóng cửa sổ) thì thoát khỏi vòng lặp
        if (e.type == SDL_QUIT) break;

        // Nếu có một phím được nhấn, thì xét phím đó là gì để xử lý tiếp
        if (e.type == SDL_KEYDOWN) {
        	switch (e.key.keysym.sym) {
        		case SDLK_ESCAPE: break; // Nếu nhấn phìm ESC thì thoát khỏi vòng lặp
        		// Nếu phím mũi tên trái, dịch sang trái
    	        // (cộng chiều rộng, trừ bước, rồi lấy phần dư để giá trị luôn dương, và hiệu ứng quay vòng)
        		case SDLK_LEFT : box.moveLeft();
        			break;
        		// Tương tự với dịch phải, xuống và lên
            	case SDLK_RIGHT: box.moveRight();
            		break;
            	case SDLK_DOWN: box.moveDown();
					break;
            	case SDLK_UP: box.moveUp();
            		break;
        		default: break;
			}
        }

        SDL_Delay(1);
    }



    quitSDL(window, renderer);
    return 0;
}





void waitUntilKeyPressed()
{
    SDL_Event e;
    while (true) {
        if ( SDL_WaitEvent(&e) != 0 &&
             (e.type == SDL_KEYDOWN || e.type == SDL_QUIT) )
            return;
        SDL_Delay(1);
    }
}

void quitSDL(SDL_Window* window, SDL_Renderer* renderer)
{
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();
}

void initSDL(SDL_Window* &window, SDL_Renderer* &renderer)
{
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
        logSDLError(std::cout, "SDL_Init", true);

    window = SDL_CreateWindow(WINDOW_TITLE.c_str(), SDL_WINDOWPOS_CENTERED,
       SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    //window = SDL_CreateWindow(WINDOW_TITLE.c_str(), SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_FULLSCREEN_DESKTOP);
    if (window == nullptr) logSDLError(std::cout, "CreateWindow", true);


    //Khi thông thường chạy với môi trường bình thường ở nhà
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED |
                                              SDL_RENDERER_PRESENTVSYNC);
    //Khi chạy ở máy thực hành WinXP ở trường (máy ảo)
    //renderer = SDL_CreateSoftwareRenderer(SDL_GetWindowSurface(window));
    if (renderer == nullptr) logSDLError(std::cout, "CreateRenderer", true);

    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
    SDL_RenderSetLogicalSize(renderer, SCREEN_WIDTH, SCREEN_HEIGHT);
}


void logSDLError(std::ostream& os,const std::string &msg, bool fatal)
{
    os << msg << " Error: " << SDL_GetError() << std::endl;
    if (fatal) {
        SDL_Quit();
        exit(1);
    }
}





