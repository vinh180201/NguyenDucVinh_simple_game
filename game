#include <SDL.h>
#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>


using namespace std;

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const string WINDOW_TITLE = "Game rac";

struct Box {
    float x,y,w,h,stepX=0,stepY=0;
    Box (float _x,float _y,float _w,float _h) {
        x=_x;
        y=_y;
        w=_w;
        h=_h;
    }
    void deleteBox (SDL_Renderer* &renderer,int count) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        if (count<15) SDL_SetRenderDrawColor(renderer, 125, 125, 125, 255);
        if (count>=15) SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderFillRect(renderer, &filled_rect);
    }
    void render (SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
        SDL_RenderFillRect(renderer, &filled_rect);
    }
    void move () {
        if (SCREEN_WIDTH/4<=x+stepX && x+stepX+10<=SCREEN_WIDTH/4*3) {
            x+=stepX;
        }
        if (SCREEN_HEIGHT/4<=y+stepY && y+stepY+10<=SCREEN_HEIGHT/4*3) {
            y+=stepY;
        }
    }
    void moveRight () {
        stepX=3;
        stepY=0;
    }
    void moveLeft () {
        stepX=-3;
        stepY=0;
    }
    void moveUp () {
        stepX=0;
        stepY=-3;
    }
    void moveDown () {
        stepX=0;
        stepY=3;
    }
    bool destroyByHorizonal (float y1,float y2,int count) {
        float a=1.0*sqrt((SCREEN_WIDTH-5)*(SCREEN_WIDTH-5)+(y1-y2)*(y1-y2));
        float b=1.0*(sqrt((x+5)*(x+5)+(y+5-y1)*(y+5-y1))+1.0*sqrt((SCREEN_WIDTH-10-x)*(SCREEN_WIDTH-10-x)+(y+5-y2)*(y+5-y2)));
        //cout << "a=" << a << " b=" << b << endl;
        if (count==15) return (a+0.13>=b);
        else return false;
    }
    bool destroyByVertical (float x1,float x2,int count) {
        float a=1.0*sqrt((SCREEN_HEIGHT-5)*(SCREEN_HEIGHT-5)+(x1-x2)*(x1-x2));
        float b=1.0*(sqrt((y+5)*(y+5)+(x+5-x1)*(x+5-x1))+1.0*sqrt((SCREEN_HEIGHT-10-y)*(SCREEN_HEIGHT-10-y)+(x+5-x2)*(x+5-x2)));
        //cout << "a=" << a << " b=" << b << endl;
        if (count==15) return (a+0.15>=b);
        else return false;
    }
    void controlBox(SDL_Event e) {
        if (e.type == SDL_KEYDOWN) {
            switch (e.key.keysym.sym) {
                case SDLK_ESCAPE: break;
                case SDLK_LEFT : moveLeft(); break;
                case SDLK_RIGHT: moveRight(); break;
                case SDLK_DOWN: moveDown(); break;
                case SDLK_UP: moveUp(); break;
                default: break;
            }
        }

    }
};

void logSDLError(std::ostream& os,const std::string &msg, bool fatal = false);

void initSDL(SDL_Window* &window, SDL_Renderer* &renderer);

void quitSDL(SDL_Window* window, SDL_Renderer* renderer);

void waitUntilKeyPressed();

int gameContinue (SDL_Window* &window,SDL_Renderer* &renderer,bool check);

void emergeSetBack (SDL_Renderer* &renderer,float &x1,float &x2,float &y1,float &y2, int count);

void initSetBackHorizonal (SDL_Renderer* &renderer,float y1,float y2,int count);

void createSetBackHorizonal(SDL_Renderer* &renderer,float x,float y);

void initSetBackVertical (SDL_Renderer* &renderer,float x1,float x2,int count);

void createSetBackVertical(SDL_Renderer* &renderer,float x,float y);

void createLimitArea(SDL_Renderer *renderer);

int playGame();

int main(int argc, char* argv[])
{
    while (true) {
        cout << "Welcome to my game.Press 1 to continue.Press 0 to end game!" << endl;
        if (!playGame()) break;
    }
    return 0;
}

int playGame () {
    SDL_Window* window;
    SDL_Renderer* renderer;
    initSDL(window, renderer);
    Box box (SCREEN_WIDTH/2,SCREEN_HEIGHT/2,10,10);
    int count=0;
    bool check=true;
    float x1=0,x2=0,y1=0,y2=0;
    SDL_Event e;
    while (true) {
        box.move();
        count%=20;
        if (count<15) createLimitArea(renderer);
        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        if (count==0) {SDL_RenderClear(renderer);}
        box.render(renderer);
        SDL_RenderPresent(renderer);
        emergeSetBack(renderer,x1,x2,y1,y2,count);
        ++count;
        if (box.destroyByHorizonal(y1,y2,count)==true || box.destroyByVertical(x1,x2,count)==true) {
            initSetBackHorizonal(renderer,y1,y2,15);
            initSetBackVertical(renderer,x1,x2,15);
            check=false;
            break;
        }
        box.deleteBox(renderer,count);
        SDL_RenderPresent(renderer);
        if ( SDL_PollEvent(&e) == 0) continue;
        if (e.type == SDL_QUIT) break;
        box.controlBox(e);
    }
    return gameContinue(window,renderer,check);
}

void createLimitArea (SDL_Renderer *renderer) {
    SDL_Rect filled_rect;
    filled_rect.x = SCREEN_WIDTH/4;
    filled_rect.y = SCREEN_HEIGHT/4;
    filled_rect.w = SCREEN_WIDTH/2;
    filled_rect.h = SCREEN_HEIGHT/2;
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderFillRect(renderer, &filled_rect);
}

void createSetBackVertical(SDL_Renderer* &renderer,float x,float y) {
    SDL_Rect filled_rect;
    filled_rect.x = x;
    filled_rect.y = y;
    filled_rect.w = 10;
    filled_rect.h = 10;
    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_RenderFillRect(renderer, &filled_rect);
}

void initSetBackVertical (SDL_Renderer* &renderer,float x1,float x2,int count) {
    createSetBackVertical(renderer,x1,0);
    SDL_RenderPresent(renderer);

    createSetBackVertical(renderer,x2,SCREEN_HEIGHT-10);
    SDL_RenderPresent(renderer);

    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    if (count==15) {
        SDL_RenderDrawLine(renderer,x1,0,x2,SCREEN_HEIGHT-10);
        SDL_RenderPresent(renderer);
    }
}

void createSetBackHorizonal(SDL_Renderer* &renderer,float x,float y) {
    SDL_Rect filled_rect;
    filled_rect.x = x;
    filled_rect.y = y;
    filled_rect.w = 10;
    filled_rect.h = 10;
    SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255);
    SDL_RenderFillRect(renderer, &filled_rect);
}

void initSetBackHorizonal (SDL_Renderer* &renderer,float y1,float y2,int count) {
    createSetBackHorizonal(renderer,0,y1);
    SDL_RenderPresent(renderer);

    createSetBackHorizonal(renderer,SCREEN_WIDTH-10,y2);
    SDL_RenderPresent(renderer);

    SDL_SetRenderDrawColor(renderer,0,0,255,255);
    if (count==15) {
        SDL_RenderDrawLine(renderer,0,y1,SCREEN_WIDTH-10,y2);
        SDL_RenderPresent(renderer);
    }
}

void emergeSetBack (SDL_Renderer* &renderer,float &x1,float &x2,float &y1,float &y2, int count) {
    switch (count) {
        case 0:
            x1= rand()%(SCREEN_WIDTH*3/4-9);
            x2= SCREEN_WIDTH/4+rand()%(SCREEN_WIDTH*3/4-9);
            y1= rand()%(SCREEN_HEIGHT*3/4-9);
            y2= SCREEN_HEIGHT/4+rand()%(SCREEN_HEIGHT*3/4-9);
            SDL_Delay(50);
            break;
        case 1:case 2:case 3:case 4:
            SDL_Delay(50);
            break;
        case 5:case 7:case 9:case 11:case 13:case 15:case 17:case 19:
            initSetBackHorizonal(renderer,y1,y2,count);
            initSetBackVertical(renderer,x1,x2,count);
            break;
        case 6:case 8:case 10:case 12:case 14:case 16:case 18:
            SDL_Delay(50);
            break;
    }
}

int gameContinue (SDL_Window* &window,SDL_Renderer* &renderer,bool check) {
    SDL_Event e;
    if (check==false) {
        while (!(e.key.keysym.sym==SDLK_1 || e.key.keysym.sym==SDLK_0)) {
            SDL_WaitEvent(&e);
        }
        if (e.key.keysym.sym==SDLK_1) {
            quitSDL(window, renderer);
            return 1;
        }
        else if (e.key.keysym.sym==SDLK_0) {
            quitSDL(window, renderer);
            return 0;
        }
    }
    else {
        quitSDL(window, renderer);
        return 1;
    }
}

void waitUntilKeyPressed() {
    SDL_Event e;
    while (true) {
        if ( SDL_WaitEvent(&e) != 0 &&(e.type == SDL_KEYDOWN || e.type == SDL_QUIT) )
            return;
    }
}

void quitSDL(SDL_Window* window, SDL_Renderer* renderer) {
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();
}

void initSDL(SDL_Window* &window, SDL_Renderer* &renderer) {
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {logSDLError(std::cout, "SDL_Init", true);}
    window = SDL_CreateWindow(WINDOW_TITLE.c_str(), SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == nullptr) {logSDLError(std::cout, "CreateWindow", true);}
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED |SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {logSDLError(std::cout, "CreateRenderer", true);}
    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
    SDL_RenderSetLogicalSize(renderer, SCREEN_WIDTH, SCREEN_HEIGHT);
}

void logSDLError(std::ostream& os,const std::string &msg, bool fatal) {
    os << msg << " Error: " << SDL_GetError() << std::endl;
    if (fatal) {
        SDL_Quit();
        exit(1);
    }
}



















