#include <SDL.h>
#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

void logSDLError(std::ostream& os,const std::string &msg, bool fatal = false);

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const string WINDOW_TITLE = "An Implementation of Code.org Painter";

void initSDL(SDL_Window* &window, SDL_Renderer* &renderer);

void quitSDL(SDL_Window* window, SDL_Renderer* renderer);

void waitUntilKeyPressed();

void refreshScreen(SDL_Window* window, SDL_Renderer* renderer, const SDL_Rect& filled_rect);

int gameContinue (SDL_Window* &window,SDL_Renderer* &renderer,bool check);

void emergeSetBack (SDL_Renderer* &renderer,float &x1,float &x2,float &y1,float &y2, int count);
struct Box {
    float x;
    float y;
    float w;
    float h;
    float stepX=0;
    float stepY=0;
    Box (float _x,float _y,float _w,float _h) {
        x=_x;
        y=_y;
        w=_w;
        h=_h;
    }
    void render (SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); // green
        SDL_RenderFillRect(renderer, &filled_rect);
    }
    void move () {
        x+=stepX;
        y+=stepY;
    }
    void moveRight () {
        stepX=3;
        stepY=0;
    }
    void moveLeft () {
        stepX=-3;
        stepY=0;
    }
    void moveUp () {
        stepX=0;
        stepY=-3;
    }
    void moveDown () {
        stepX=0;
        stepY=3;
    }
    bool inside(float minX,float minY,float maxX,float maxY) {
        return (minX<=x && minY<=y && maxX>=x+w && maxY>=y+h);
    }
    bool destroyByHorizonal (float y1,float y2,int count) {
        float a=1.0*sqrt(795*795+(y1-y2)*(y1-y2));
        float b=1.0*(sqrt((x+5)*(x+5)+(y+5-y1)*(y+5-y1))+1.0*sqrt((790-x)*(790-x)+(y+5-y2)*(y+5-y2)));
        //cout << "a=" << a << " b=" << b << endl;
        if (count%20==15) return !(a+0.13>=b);
        else return true;
    }
    bool destroyByVertical (float x1,float x2,int count) {
        float a=1.0*sqrt(595*595+(x1-x2)*(x1-x2));
        float b=1.0*(sqrt((y+5)*(y+5)+(x+5-x1)*(x+5-x1))+1.0*sqrt((590-y)*(590-y)+(x+5-x2)*(x+5-x2)));
        //cout << "a=" << a << " b=" << b << endl;
        if (count%20==15) return !(a+0.15>=b);
        else return true;
    }
    void controlBox(SDL_Event e) {
        if (e.type == SDL_KEYDOWN) {
            switch (e.key.keysym.sym) {
                case SDLK_ESCAPE: break;
                case SDLK_LEFT : moveLeft(); break;
                case SDLK_RIGHT: moveRight(); break;
                case SDLK_DOWN: moveDown(); break;
                case SDLK_UP: moveUp(); break;
                default: break;
            }
        }
    }
};

struct ObstacleHorizonal {
    float x;
    float y;
    float w;
    float h;
    ObstacleHorizonal (float _x,float _y,float _w,float _h) {
        x=_x;
        y=_y;
        w=_w;
        h=_h;
    }
    void createSetBackHorizonal(SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255);
        SDL_RenderFillRect(renderer, &filled_rect);
    }
};

void initSetBackHorizonal (SDL_Renderer* &renderer,float y1,float y2,int count) {
    //srand(time(NULL));
    ObstacleHorizonal setBack1(0,y1,10,10);
    setBack1.createSetBackHorizonal(renderer);
    SDL_RenderPresent(renderer);

    ObstacleHorizonal setBack2(790,y2,10,10);
    setBack2.createSetBackHorizonal(renderer);
    SDL_RenderPresent(renderer);

    SDL_SetRenderDrawColor(renderer,0,0,255,255);
    if (count%20==15) {
        SDL_RenderDrawLine(renderer,0,y1,790,y2);
        SDL_RenderPresent(renderer);
    }
}

struct ObstacleVertical {
    float x;
    float y;
    float w;
    float h;
    ObstacleVertical (float _x,float _y,float _w,float _h) {
        x=_x;
        y=_y;
        w=_w;
        h=_h;
    }
    void createSetBackVertical(SDL_Renderer* &renderer) {
        SDL_Rect filled_rect;
        filled_rect.x = x;
        filled_rect.y = y;
        filled_rect.w = w;
        filled_rect.h = h;
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_RenderFillRect(renderer, &filled_rect);
    }
};

void initSetBackVertical (SDL_Renderer* &renderer,float x1,float x2,int count) {
    //srand(time(NULL));
    ObstacleVertical setBack1(x1,0,10,10);
    setBack1.createSetBackVertical(renderer);
    SDL_RenderPresent(renderer);

    ObstacleVertical setBack2(x2,590,10,10);
    setBack2.createSetBackVertical(renderer);
    SDL_RenderPresent(renderer);

    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    if (count%20==15) {
        SDL_RenderDrawLine(renderer,x1,0,x2,590);
        SDL_RenderPresent(renderer);
    }
}

int playGame();

int main(int argc, char* argv[])
{
    while (true) {
        if (!playGame()) break;
    }
    return 0;
}

int playGame () {
    //srand(time(NULL));
    SDL_Window* window;
    SDL_Renderer* renderer;
    initSDL(window, renderer);
    Box box (15,20,10,10);
    int count=0;
    int level=3;
    bool check=true;
    float x1=0,x2=0,y1=0,y2=0;
    SDL_Event e;
    while (box.inside(0,0,SCREEN_WIDTH,SCREEN_HEIGHT)) {
        //cout << "dau";
        box.move();
        if (box.destroyByHorizonal(y1,y2,count)==false || box.destroyByVertical(x1,x2,count)==false) {
            initSetBackHorizonal(renderer,y1,y2,15);
            initSetBackVertical(renderer,x1,x2,15);
            check=false;
            //SDL_Delay(400);
            break;
        }
        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);
        box.render(renderer);
        SDL_RenderPresent(renderer);
        emergeSetBack(renderer,x1,x2,y1,y2,count);
        //cout << "count=" << count << endl ;
        count++;
        //waitUntilKeyPressed();
        if ( SDL_PollEvent(&e) == 0) continue;
        if (e.type == SDL_QUIT) break;
        box.controlBox(e);
    //cout << "cuoi";
    }
    //cout << "gameplay";
    return gameContinue(window,renderer,check);
}

void emergeSetBack (SDL_Renderer* &renderer,float &x1,float &x2,float &y1,float &y2, int count) {
        if (count%20==0) {
            x1= rand()%(SCREEN_WIDTH-9);
            x2= rand()%(SCREEN_WIDTH-9);
            y1= rand()%(SCREEN_HEIGHT-9);
            y2= rand()%(SCREEN_HEIGHT-9);
            //cout << "x1=" << x1 << " x2=" << x2 << " y1=" << y1 << " y2=" << y2 << endl;
        }
        if (0<=count%20 && count%20<5) {
            SDL_Delay(50);
        }
        if ( 5<=count%20 && count%20<=19) {
            initSetBackHorizonal(renderer,y1,y2,count);
            initSetBackVertical(renderer,x1,x2,count);
        }
}


int gameContinue (SDL_Window* &window,SDL_Renderer* &renderer,bool check) {
    //cout << "continue";
    SDL_Event e;
    if (check==false) {
        while (!(e.key.keysym.sym==SDLK_1 || e.key.keysym.sym==SDLK_0)) {
            SDL_WaitEvent(&e);
        }
        if (e.key.keysym.sym==SDLK_1) {
            quitSDL(window, renderer);
            return 1;
        }
        else if (e.key.keysym.sym==SDLK_0) {
            quitSDL(window, renderer);
            return 0;
        }
    }
    else {
        quitSDL(window, renderer);
        return 1;
    }
}

void waitUntilKeyPressed() {
    SDL_Event e;
    while (true) {
        if ( SDL_WaitEvent(&e) != 0 &&(e.type == SDL_KEYDOWN || e.type == SDL_QUIT) )
            return;
    }
}

void quitSDL(SDL_Window* window, SDL_Renderer* renderer) {
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();
}

void initSDL(SDL_Window* &window, SDL_Renderer* &renderer) {
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {logSDLError(std::cout, "SDL_Init", true);}
    window = SDL_CreateWindow(WINDOW_TITLE.c_str(), SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == nullptr) {logSDLError(std::cout, "CreateWindow", true);}
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED |SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {logSDLError(std::cout, "CreateRenderer", true);}
    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
    SDL_RenderSetLogicalSize(renderer, SCREEN_WIDTH, SCREEN_HEIGHT);
}

void logSDLError(std::ostream& os,const std::string &msg, bool fatal) {
    os << msg << " Error: " << SDL_GetError() << std::endl;
    if (fatal) {
        SDL_Quit();
        exit(1);
    }
}
